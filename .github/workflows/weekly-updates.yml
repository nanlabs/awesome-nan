name: Weekly Slack Updates

concurrency:
  group: notify-weekly-updates
  cancel-in-progress: true

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  schedule:
    - cron: "31 1,12 * * *"

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setup Deno
        uses: denolib/setup-deno@v2
        with:
          deno-version: v1.30

      - name: Download indexes from last week
        run: |
          REPOS=(
            nancy.go
            frontend-reference
            devops-reference
            python-reference
          )

          # For each, extract the repository url, the branch and the file path
          # and then clone the repo, checkout the branch and get the file from
          # the last week commit.
          i=0
          for repo in "${REPOS[@]}"; do
            github_url="https://github.com/nanlabs/$repo"
            branch=main
            file_path=examples.json
            filename=examples
            extension=json
            filename="$filename-$i.$extension"
            git clone "$github_url" --branch "$branch" --single-branch --depth 1 --quiet repo-$i
            cd repo-$i
            git checkout $(git log --before="1 week ago" --format="%H" -n 1)
            cd ..
            cp "repo-$i/$file_path" "$filename"
            rm -rf "repo-$i"
            i=$((i + 1))
          done

          # Get the list of examples previously downloaded
          EXAMPLES=$(ls examples-*.json)

          # Generate the JSON file
          ./tools/readme-generator/main.ts --json examples.json $EXAMPLES > previous-week-examples.json

          # Remove the downloaded files
          rm examples-*.json

          # Log the previous week examples
          cat previous-week-examples.json

      - name: Download current indexes
        run: |
          URLS=(
            https://raw.githubusercontent.com/nanlabs/nancy.go/main/examples.json
            https://raw.githubusercontent.com/nanlabs/frontend-reference/main/examples.json
            https://raw.githubusercontent.com/nanlabs/devops-reference/main/examples.json
            https://raw.githubusercontent.com/nanlabs/python-reference/main/examples.json
          )

          # Download files preventing duplicated names (e.g. examples.json)
          i=0
          for url in "${URLS[@]}"; do
            filename=$(basename "$url")
            extension="${filename##*.}"
            filename="${filename%.*}"
            filename="$filename-$i.$extension"
            curl -s "$url" -o "$filename"
            i=$((i + 1))
          done

          # Get the list of examples previously downloaded
          EXAMPLES=$(ls examples-*.json)

          # Generate the JSON file
          ./tools/readme-generator/main.ts --json examples.json $EXAMPLES > new-examples.json

          # Remove the downloaded files
          rm examples-*.json

          # Log the new examples
          cat new-examples.json

      - name: Create a list of the new elements from the JSON!
        # Both JSON files have the following structure:
        # [
        #   {
        #     name: "Example 1",
        #     description: "This is an example.",
        #     tags: ["Examples > Category 1 > Subcategory 1"],
        #     labels: ["label1", "label2"],
        #   },
        #   {
        #     name: "Example 2",
        #     description: "This is another example.",
        #     tags: ["Examples > Category 1 > Subcategory 1"],
        #     labels: ["label1", "label2"],
        #   },
        #   {
        #     name: "Example 3",
        #     description: "This is an example.",
        #     tags: ["Examples > Category 2 > Subcategory 2"],
        #     labels: ["label1", "label2"],
        #   },
        # ]
        #
        # We need to list which elements are new, so we need to compare the
        # previous week JSON file with the current week JSON file. We can do
        # this with jq, which is a command-line JSON processor.
        # When doing the compare, for each element treat the name concatenated
        # with the tags as the unique identifier. Do it for each tag.
        run: |
          # Get the list of new elements
          NEW_ELEMENTS=$(jq -s '.[1] - .[0] | map({name: .name, tags: .tags})' previous-week-examples.json new-examples.json)

          # Log the new elements
          echo "$NEW_ELEMENTS"
