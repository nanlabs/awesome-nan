{
  "$schema": "https://raw.githubusercontent.com/nanlabs/awesome-nan/main/examples.schema.json",
  "list": [
    {
      "name": "Storybook Playground",
      "description": "An application showcasing examples of React components, hooks, and libraries developed in the Nancy.js repository. It serves as a playground for testing and demonstrating these features using Storybook.",
      "url": "https://github.com/nanlabs/nancy.js/tree/main/apps/playground/",
      "tags": [
        "Apps and Boilerplates"
      ],
      "labels": [
        "React",
        "Storybook",
        "Nancy.js",
        "Component Library"
      ]
    },
    {
      "name": "@nanlabs/react-hooks",
      "description": "A collection of reusable React hooks designed to simplify state management, side effects, and other common patterns in React applications.",
      "url": "https://www.npmjs.com/package/@nanlabs/react-hooks",
      "tags": [
        "Node Packages"
      ],
      "labels": [
        "React",
        "Hooks",
        "Custom Hooks",
        "State Management"
      ]
    },
    {
      "name": "@nanlabs/react-ui",
      "description": "A comprehensive library of React components designed to accelerate UI development with a consistent design system.",
      "url": "https://www.npmjs.com/package/@nanlabs/react-ui",
      "tags": [
        "Node Packages"
      ],
      "labels": [
        "React",
        "Components",
        "UI",
        "Design System",
        "Reusable"
      ]
    },
    {
      "name": "@nanlabs/react-thirdparty",
      "description": "A React library offering components that integrate with third-party services like Google ReCaptcha, enabling seamless external integrations.",
      "url": "https://www.npmjs.com/package/@nanlabs/react-thirdparty",
      "tags": [
        "Node Packages"
      ],
      "labels": [
        "React",
        "Components",
        "Third-Party Integrations",
        "Google ReCaptcha"
      ]
    },
    {
      "name": "@nanlabs/thirdparty",
      "description": "A utility library providing tools for integrating third-party services into web applications, including support for APIs like Google ReCaptcha.",
      "url": "https://www.npmjs.com/package/@nanlabs/thirdparty",
      "tags": [
        "Node Packages"
      ],
      "labels": [
        "Third-Party Tools",
        "Integrations",
        "Web Development"
      ]
    },
    {
      "name": "@nanlabs/fp",
      "description": "A TypeScript library offering functional programming utilities, including type guards, error handling, and other tools to write cleaner, more maintainable code.",
      "url": "https://www.npmjs.com/package/@nanlabs/fp",
      "tags": [
        "Node Packages"
      ],
      "labels": [
        "Functional Programming",
        "TypeScript",
        "Utilities",
        "Error Handling"
      ]
    },
    {
      "name": "@nanlabs/eslint-config",
      "description": "A shared ESLint configuration to enforce consistent coding standards across JavaScript projects.",
      "url": "https://www.npmjs.com/package/@nanlabs/eslint-config",
      "tags": [
        "Node Packages"
      ],
      "labels": [
        "ESLint",
        "Code Style",
        "JavaScript"
      ]
    },
    {
      "name": "@nanlabs/eslint-config-ts",
      "description": "An ESLint configuration tailored for TypeScript projects, ensuring consistent and error-free TypeScript code.",
      "url": "https://www.npmjs.com/package/@nanlabs/eslint-config-ts",
      "tags": [
        "Node Packages"
      ],
      "labels": [
        "ESLint",
        "TypeScript",
        "Code Style"
      ]
    },
    {
      "name": "@nanlabs/eslint-config-react",
      "description": "An ESLint configuration optimized for React projects, promoting best practices and consistent code style.",
      "url": "https://www.npmjs.com/package/@nanlabs/eslint-config-react",
      "tags": [
        "Node Packages"
      ],
      "labels": [
        "ESLint",
        "React",
        "TypeScript",
        "Code Style"
      ]
    },
    {
      "name": "@nanlabs/eslint-config-next",
      "description": "An ESLint configuration designed for Next.js projects, ensuring adherence to best practices and consistent coding standards.",
      "url": "https://www.npmjs.com/package/@nanlabs/eslint-config-next",
      "tags": [
        "Node Packages"
      ],
      "labels": [
        "ESLint",
        "Next.js",
        "TypeScript",
        "Code Style"
      ]
    },
    {
      "name": "React Boilerplate",
      "description": "A robust boilerplate for starting React projects with Vite, featuring CI/CD setup, Docker integration, hot reload for development, and production-ready optimizations.",
      "url": "https://github.com/nanlabs/react-boilerplate",
      "tags": [
        "Apps and Boilerplates"
      ],
      "labels": [
        "React",
        "Boilerplate",
        "Vite",
        "CI/CD",
        "Docker"
      ]
    },
    {
      "name": "TypeScript Monorepo Boilerplate",
      "description": "A boilerplate for creating TypeScript monorepo projects using Turborepo, with support for NPM workspaces, Changesets, and a complete development setup.",
      "url": "https://github.com/nanlabs/ts-monorepo-boilerplate",
      "tags": [
        "Apps and Boilerplates"
      ],
      "labels": [
        "TypeScript",
        "Turborepo",
        "Monorepo",
        "Boilerplate",
        "React",
        "NPM Workspaces",
        "Changesets",
        "ESLint",
        "Prettier",
        "Jest",
        "Nest.js",
        "Storybook"
      ]
    },
    {
      "name": "Supercharge Your Website with Core Web Vitals",
      "description": "A guide to optimizing website performance and SEO using Core Web Vitals, with practical tips and tools for delivering exceptional user experiences.",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/seo-and-core-web-vitals",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > Frontend > Website Optimization and Performance"
      ],
      "labels": [
        "Core Web Vitals",
        "SEO",
        "Performance",
        "User Experience"
      ]
    },
    {
      "name": "Prop Drilling",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/hooks-prop-drilling/",
      "description": "An example demonstrating how to pass data from a parent component to a child component using props in React.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Props",
        "State Management"
      ]
    },
    {
      "name": "Context",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/hooks-context/",
      "description": "An example showcasing the use of React Context to share data between components efficiently.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Context API",
        "State Management"
      ]
    },
    {
      "name": "Global State",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/hooks-global-state/",
      "description": "An example illustrating how to implement a global state using React Hooks for centralized state management.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Global State",
        "State Management"
      ]
    },
    {
      "name": "Hookstate",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/hooks-hookstate/",
      "description": "An example demonstrating the use of Hookstate for efficient and scalable state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Hookstate",
        "State Management"
      ]
    },
    {
      "name": "Teaful",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/hooks-teaful/",
      "description": "An example showcasing the use of Teaful for lightweight and simple state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Teaful",
        "State Management"
      ]
    },
    {
      "name": "XState",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/fsm-xstate/",
      "description": "An example illustrating the use of XState for managing state with finite state machines in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "XState",
        "State Management"
      ]
    },
    {
      "name": "React Query",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/api-react-query/",
      "description": "An example demonstrating the use of React Query for efficient data fetching and caching in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "React Query",
        "Data Fetching"
      ]
    },
    {
      "name": "Effector",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/reactive-effector/",
      "description": "An example showcasing the use of Effector for reactive state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Effector",
        "State Management"
      ]
    },
    {
      "name": "Akita",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/reactive-akita/",
      "description": "An example illustrating the use of Akita for state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Akita",
        "State Management"
      ]
    },
    {
      "name": "Rxjs",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/reactive-rxjs/",
      "description": "An example demonstrating the use of Rxjs for reactive programming and state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Rxjs",
        "Reactive Programming"
      ]
    },
    {
      "name": "Storeon",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/reactive-storeon/",
      "description": "An example showcasing the use of Storeon for lightweight state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Storeon",
        "State Management"
      ]
    },
    {
      "name": "Jotai",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/atomic-jotai/",
      "description": "An example illustrating the use of Jotai for atomic state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Jotai",
        "State Management"
      ]
    },
    {
      "name": "Recoil",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/atomic-recoil/",
      "description": "An example demonstrating the use of Recoil for efficient state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Recoil",
        "State Management"
      ]
    },
    {
      "name": "AgileTs",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/atomic-agilets/",
      "description": "An example showcasing the use of AgileTs for scalable and maintainable state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "AgileTs",
        "State Management"
      ]
    },
    {
      "name": "Zustand",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/unidirectional-zustand/",
      "description": "An example illustrating the use of Zustand for unidirectional state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Zustand",
        "State Management"
      ]
    },
    {
      "name": "Redux Toolkit",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/unidirectional-redux-toolkit/",
      "description": "An example demonstrating the use of Redux Toolkit for unidirectional state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Redux Toolkit",
        "State Management"
      ]
    },
    {
      "name": "Rematch",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/unidirectional-rematch/",
      "description": "An example showcasing the use of Rematch for unidirectional state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Rematch",
        "State Management"
      ]
    },
    {
      "name": "Unistore",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/unidirectional-unistore/",
      "description": "An example illustrating the use of Unistore for unidirectional state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Unistore",
        "State Management"
      ]
    },
    {
      "name": "MobX",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/bidirectional-mobx/",
      "description": "An example demonstrating the use of MobX for bidirectional state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "MobX",
        "State Management"
      ]
    },
    {
      "name": "Valtio",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/bidirectional-valtio/",
      "description": "An example showcasing the use of Valtio for bidirectional state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "Valtio",
        "State Management"
      ]
    },
    {
      "name": "MobX State Tree",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/bidirectional-mobx-state-tree/",
      "description": "An example illustrating the use of MobX State Tree for bidirectional state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "MobX State Tree",
        "State Management"
      ]
    },
    {
      "name": "React Easy State",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/bidirectional-easy-state/",
      "description": "An example demonstrating the use of React Easy State for bidirectional state management in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "React Easy State",
        "State Management"
      ]
    },
    {
      "name": "Microfrontend with Shared React Router and React Components",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/microfrontend-react-app-react-components/",
      "description": "An example showcasing a microfrontend project with shared React Router and React components for seamless integration.",
      "tags": [
        "Examples > Frontend > Microfrontend"
      ],
      "labels": [
        "React",
        "Microfrontend",
        "Shared Router",
        "Integration"
      ]
    },
    {
      "name": "Microfrontend with Shared React Router and React Application",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/microfrontend-react-shell-react-app-shared-routing/",
      "description": "An example demonstrating a microfrontend project with shared React Router in a container application and independent React application.",
      "tags": [
        "Examples > Frontend > Microfrontend"
      ],
      "labels": [
        "React",
        "Microfrontend",
        "Shared Router",
        "Integration"
      ]
    },
    {
      "name": "Microfrontend with Shared React Router and Vue Application",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/microfrontend-react-shell-react-vue-app/",
      "description": "An example showcasing a microfrontend project with shared React Router in a container application and independent Vue application.",
      "tags": [
        "Examples > Frontend > Microfrontend"
      ],
      "labels": [
        "React",
        "Vue",
        "Microfrontend",
        "Shared Router",
        "Integration"
      ]
    },
    {
      "name": "Comparative Analysis between styled-components and Tailwind CSS",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/styled-components-vs-tailwindcss/",
      "description": "An article presenting a comparative analysis of styled-components and Tailwind CSS, focusing on practical implementations of a UI challenge using both libraries.",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > Frontend > Styling and CSS"
      ],
      "labels": [
        "CSS",
        "styled-components",
        "Tailwind CSS",
        "UI Challenge"
      ]
    },
    {
      "name": "Proof of Concept: Million, The Virtual DOM Replacement for React.",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/million-poc-performance/",
      "description": "A proof of concept showcasing Million as a virtual DOM replacement for React, with comparative performance analysis.",
      "tags": [
        "Examples > Frontend > Virtual Dom"
      ],
      "labels": [
        "React",
        "Million",
        "Virtual DOM",
        "Performance"
      ]
    },
    {
      "name": "React Security Best Practices Guide",
      "description": "A checklist providing React security best practices to identify and address security issues, with guidance on automating security testing.",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/react-security-best-practices",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > Frontend > Security Best Practices"
      ],
      "labels": [
        "React",
        "Security",
        "Best Practices",
        "Automated Testing"
      ]
    },
    {
      "name": "NextJS with SWR",
      "description": "An example demonstrating the use of SWR with NextJS for efficient data fetching and mutation.",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/nextjs-with-swr-example",
      "tags": [
        "Examples > Frontend > React State Management",
        "Examples > Frontend > NextJs"
      ],
      "labels": [
        "NextJS",
        "SWR",
        "React",
        "Data Fetching"
      ]
    },
    {
      "name": "SWR",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/state-management/examples/api-swr/",
      "description": "An example showcasing the use of SWR for efficient data fetching and caching in React applications.",
      "tags": [
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "SWR",
        "Data Fetching"
      ]
    },
    {
      "name": "React Native with expo router",
      "description": "An example demonstrating the use of expo router for efficient navigation in React Native applications.",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/react-native-expo-router/",
      "tags": [
        "Examples > Frontend > React Native > Expo"
      ],
      "labels": [
        "React Native",
        "Expo",
        "Navigation"
      ]
    },
    {
      "name": "React Native with expo router and shared routes",
      "description": "An example showcasing the use of expo router with shared routes for seamless navigation in React Native applications.",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/react-native-expo-router-with-shared-routes/",
      "tags": [
        "Examples > Frontend > React Native > Expo"
      ],
      "labels": [
        "React Native",
        "Expo",
        "Shared Routes"
      ]
    },
    {
      "name": "The Ultimate React State Management Framework",
      "description": "An article presenting a step-by-step framework for making informed decisions in React state management, ensuring robust and maintainable applications.",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/the-ultimate-react-state-management-framework",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > Frontend > React State Management"
      ],
      "labels": [
        "React",
        "State Management",
        "Framework",
        "Best Practices"
      ]
    },
    {
      "name": "Navigator Clipboard API Integration Guide",
      "description": "A detailed guide to integrating the Navigator Clipboard API into web applications for seamless content sharing and enhanced user experience.",
      "url": "https://github.com/nanlabs/frontend-reference/tree/main/examples/navigator-clipboard-api-integration",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > Frontend > Clipboard Integration"
      ],
      "labels": [
        "Clipboard API",
        "Integration",
        "User Experience"
      ]
    },
    {
      "name": "Automation Seed",
      "description": "A robust end-to-end automation framework built on WebdriverIO v7 and Selenium, leveraging Selenoid for execution. It includes features like Allure reporting, TypeScript support, and CI/CD integration with GitHub Actions.",
      "url": "https://github.com/nanlabs/automation-seed",
      "tags": [
        "Apps and Boilerplates"
      ],
      "labels": [
        "Automation Framework",
        "Selenium",
        "WebdriverIO",
        "Selenoid",
        "Allure Reporting",
        "TypeScript",
        "GitHub Actions",
        "GitHub Pages"
      ]
    },
    {
      "name": "AWS Glue ETL Boilerplate",
      "description": "A comprehensive boilerplate for AWS Glue ETL jobs, featuring infrastructure deployment with the Serverless Framework and local development using DevContainers or Docker Compose. Includes Python Shell and PySpark job examples.",
      "url": "https://github.com/nanlabs/aws-glue-etl-boilerplate",
      "tags": [
        "Apps and Boilerplates"
      ],
      "labels": [
        "AWS Glue",
        "ETL",
        "Python",
        "PySpark",
        "Serverless Framework",
        "DevContainers",
        "Docker Compose",
        "Jupyter Notebook"
      ]
    },
    {
      "name": "Basic AWS Glue ETL example app",
      "description": "A simplified yet practical example of an AWS Glue application. It uses the Serverless Framework for infrastructure deployment and supports local development with DevContainers or Docker Compose.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-glue-full-boilerplate/",
      "tags": [
        "Apps and Boilerplates"
      ],
      "labels": [
        "AWS Glue",
        "ETL",
        "Python",
        "PySpark",
        "Serverless Framework",
        "DevContainers",
        "Docker Compose",
        "Jupyter Notebook"
      ]
    },
    {
      "name": "AWS CloudWatch Evidently",
      "description": "An in-depth analysis and proof of concept demonstrating how to integrate AWS CloudWatch Evidently with a Node.js application for A/B testing and feature flag management.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/aws-cloudwatch-evidently/",
      "tags": [
        "Examples > DevOps > A/B Testing"
      ],
      "labels": [
        "AWS CloudWatch",
        "CloudWatch Evidently",
        "A/B Testing",
        "Feature Flags",
        "Node.js"
      ]
    },
    {
      "name": "Feature flags post by Atlassian",
      "description": "A guide by Atlassian on progressively exposing features using feature flags, authored by Ian Buchanan.",
      "url": "https://www.atlassian.com/continuous-delivery/principles/feature-flags",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > A/B Testing"
      ],
      "labels": [
        "Feature Flags",
        "Best Practices"
      ]
    },
    {
      "name": "When to use Shell Scripts",
      "description": "A Google guide outlining best practices for determining when to use shell scripts in development and operations.",
      "url": "https://google.github.io/styleguide/shellguide.html#when-to-use-shell",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > Shell Scripting and CLI Tools"
      ],
      "labels": [
        "Shell Scripting",
        "Best Practices",
        "Utilities"
      ]
    },
    {
      "name": "Parsing Shell Script Arguments with Easy Options",
      "description": "An example demonstrating how to simplify shell script argument parsing using the Easy Options library.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/easy-options/",
      "tags": [
        "Examples > DevOps > Shell Scripting and CLI Tools"
      ],
      "labels": [
        "Shell Scripting",
        "Utilities",
        "Easy Options"
      ]
    },
    {
      "name": "Bash as a Wrapper Utility",
      "description": "An example showcasing how to use Bash as a wrapper utility for other languages and tools, enhancing script reusability and modularity.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/bash-as-a-wrapper-utility-basic/",
      "tags": [
        "Examples > DevOps > Shell Scripting and CLI Tools"
      ],
      "labels": [
        "Shell Scripting",
        "Utilities",
        "Bash"
      ]
    },
    {
      "name": "Bash as a Wrapper Utility with Easy Options",
      "description": "An advanced example of using Bash as a wrapper utility, incorporating Easy Options for argument parsing.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/bash-as-a-wrapper-utility-with-easy-options/",
      "tags": [
        "Examples > DevOps > Shell Scripting and CLI Tools"
      ],
      "labels": [
        "Shell Scripting",
        "Utilities",
        "Easy Options",
        "Bash"
      ]
    },
    {
      "name": "Actionlint Playground",
      "description": "A static checker for GitHub Actions workflow files, helping to identify syntax and logic issues.",
      "url": "https://rhysd.github.io/actionlint/",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "GitHub Actions",
        "Actionlint",
        "CI/CD"
      ]
    },
    {
      "name": "Markdown Lint",
      "description": "This workflow validates the Markdown files in the repository using the markdownlint action.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/.github/workflows/markdownlint.yml",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "GitHub Actions",
        "Markdown Lint",
        "CI/CD"
      ]
    },
    {
      "name": "Shell Check",
      "description": "This workflow validates the shell scripts in the repository using the shellcheck action.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/.github/workflows/shellcheck.yml",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "GitHub Actions",
        "Shell Check",
        "CI/CD"
      ]
    },
    {
      "name": "Terraform Check",
      "description": "This workflow validates the Terraform files in the repository using the terraform action.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/.github/workflows/tf-check.yml",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "GitHub Actions",
        "Terraform",
        "CI/CD"
      ]
    },
    {
      "name": "TODOs to GitHub Issues",
      "description": "This tutorial shows how to create a GitHub Action that converts TODO comments into GitHub issues.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/github-actions-todo-to-issue/",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "GitHub Actions",
        "TODOs",
        "Issues",
        "Automation"
      ]
    },
    {
      "name": "Automate Pull Requests Reviews using Danger",
      "description": "This workflow automates the initial review of Pull Requests using Danger.js. It helps lint rote tasks in daily code review and codifies team norms.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/.github/workflows/pr-review.yml",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "GitHub Actions",
        "Danger.js",
        "Code Review",
        "Automation"
      ]
    },
    {
      "name": "Automation Seed example",
      "description": "Different workflows to validate the code and deploy an automation report page.",
      "url": "https://github.com/nanlabs/automation-seed/tree/main/.github/workflows",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "GitHub Actions",
        "Automation",
        "CI/CD"
      ]
    },
    {
      "name": "React Boilerplate",
      "description": "Different workflows to validate the code and deploy a React application.",
      "url": "https://github.com/nanlabs/react-boilerplate/tree/main/.github/workflows",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "GitHub Actions",
        "React",
        "CI/CD"
      ]
    },
    {
      "name": "AWS Glue using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml for AWS Glue development with AWS Glue Libs, Spark, Jupyter Notebook, AWS CLI among other tools.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-glue/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "AWS Glue",
        "Spark",
        "Jupyter Notebook",
        "AWS CLI"
      ]
    },
    {
      "name": "Localstack using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run Localstack locally with all the necessary services. This example also includes a script to create the necessary resources in Localstack. The provided examples are for DynamoDB, S3, SQS and Kinesis.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-localstack/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "Localstack",
        "DynamoDB",
        "S3",
        "SQS",
        "Kinesis"
      ]
    },
    {
      "name": "MongoDB + Mongo Express using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run MongoDB and Mongo Express locally with initialization scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-mongodb/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "MongoDB",
        "Mongo Express"
      ]
    },
    {
      "name": "Microsoft SQL Server using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run Microsoft SQL Server locally with initialization scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-mssql/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "Microsoft SQL Server"
      ]
    },
    {
      "name": "AWS Neptune using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run AWS Neptune locally with initialization scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-neptune/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "AWS Neptune"
      ]
    },
    {
      "name": "PostgreSQL using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run PostgreSQL locally with initialization scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-postgres/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "PostgreSQL"
      ]
    },
    {
      "name": "Python Buildpack",
      "description": "Buildpack example for Python applications.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/buildpacks-python",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Buildpack",
        "Python"
      ]
    },
    {
      "name": "Airflow and Spark environment using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run Airflow locally with initialization scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-airflow-spark/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "Airflow",
        "Spark"
      ]
    },
    {
      "name": "Exploring DevContainers: A Versatile Development Environment Solution",
      "description": "Introduction to Development Containers (DevContainers), a solution to create development environments with a unique approach to address specific development environment needs",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/devcontainers-intro/",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > Containers, Orchestration and Serverless > Development and Cloud Environments"
      ],
      "labels": [
        "DevContainer",
        "VSCode DevContainer",
        "GitHub Codespaces",
        "Docker",
        "Docker Compose"
      ]
    },
    {
      "name": "AWS Glue",
      "description": "DevContainer for AWS Glue development. Uses `docker-compose` to run VSCode attached to a container with all the necessary tools to develop AWS Glue jobs such us AWS Glue Libs, Spark, Jupyter Notebook, AWS CLI among other tools.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/devcontainers-glue/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Development and Cloud Environments"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "DevContainer",
        "VSCode DevContainer",
        "GitHub Codespaces",
        "AWS Glue",
        "Spark",
        "Jupyter Notebook",
        "AWS CLI"
      ]
    },
    {
      "name": "Ingress",
      "description": "Ingress example using NGINX Ingress Controller. You can run this example locally using [Minikube](https://minikube.sigs.k8s.io/docs/start/).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/kubernetes-ingress-example/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Kubernetes"
      ],
      "labels": [
        "Kubernetes",
        "Ingress",
        "NGINX Ingress Controller"
      ]
    },
    {
      "name": "AWS Amplify + NextJS 13",
      "description": "AWS Amplify example to deploy a NextJS v13 application to the Cloud.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/amplify-nextjs-deployment/",
      "tags": [
        "Examples > DevOps > Low Code solutions > AWS Amplify"
      ],
      "labels": [
        "AWS Amplify",
        "NextJS",
        "NextJS 13"
      ]
    },
    {
      "name": "AWS AppSync + TypeScript",
      "description": "Serverless Framework example to deploy an AWS AppSync API using TypeScript. It also has a local development environment using [Serverless Offline](https://www.serverless.com/plugins/serverless-offline).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-appsync-node-typescript/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "AWS AppSync",
        "TypeScript"
      ]
    },
    {
      "name": "AWS AppSync + Python",
      "description": "Serverless Framework example to deploy an AWS AppSync API using Python. It also has a local development environment using [Serverless Offline](https://www.serverless.com/plugins/serverless-offline).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-appsync-python/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "AWS AppSync",
        "Python"
      ]
    },
    {
      "name": "AWS Glue with Python Shell and PySpark Jobs",
      "description": "Serverless Framework example to deploy an AWS Glue job using Python Shell and PySpark.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-glue-deployment/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "AWS Glue",
        "Python Shell",
        "PySpark"
      ]
    },
    {
      "name": "Neo4j in EC2",
      "description": "Serverless Framework example to deploy a Neo4j instance in EC2.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-neo4j-ec2/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "Neo4j",
        "EC2"
      ]
    },
    {
      "name": "Serverless S3 Local",
      "description": "Serverless Framework example to run a lambda function locally using [Serverless S3 Local](https://www.serverless.com/plugins/serverless-s3-local).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-s3-local/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "Serverless S3 Local"
      ]
    },
    {
      "name": "Serverless SQS offline + TypeScript + ElasticMQ Example",
      "description": "Serverless Framework example to run lambda functions locally using [Serverless Offline SQS](https://www.serverless.com/plugins/serverless-offline-sqs) with ElasticMQ. It provides a full local development environment using [Serverless Offline](https://www.serverless.com/plugins/serverless-offline).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-sqs-node-typescript-offline-with-elasticmq/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "SQS",
        "Serverless Offline",
        "Serverless Offline SQS",
        "ElasticMQ"
      ]
    },
    {
      "name": "Serverless SQS offline + Python + Localstack Example",
      "description": "Serverless Framework example to run lambda functions locally using [Serverless Offline SQS](https://www.serverless.com/plugins/serverless-offline-sqs-external) with Localstack. It provides a full local development environment using [Serverless Offline](https://www.serverless.com/plugins/serverless-offline).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-sqs-python/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "SQS",
        "Serverless Offline",
        "Serverless Offline SQS",
        "Localstack",
        "Python"
      ]
    },
    {
      "name": "Start and Stop EC2 Instances with AWS Lambda",
      "description": "Serverless Framework example to start and stop EC2 instances using AWS Lambda.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-start-stop-ec2-instance/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "EC2",
        "AWS Lambda"
      ]
    },
    {
      "name": "DocumentDB Cluster",
      "description": "Serverless Framework example to deploy a DocumentDB cluster with all the necessary resources.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-documentdb/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "DocumentDB"
      ]
    },
    {
      "name": "RDS Postgres Instance",
      "description": "Serverless Framework example to deploy a RDS Postgres instance with all the necessary resources.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-rds-postgres/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "RDS Postgres"
      ]
    },
    {
      "name": "RDS Postgres Instance with Serverless VPC Plugin",
      "description": "Serverless Framework example to deploy a RDS Postgres instance with all the necessary resources using [Serverless VPC Plugin](https://www.serverless.com/plugins/serverless-vpc-plugin).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-rds-postgres-vpc-plugin/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "RDS Postgres",
        "Serverless VPC Plugin"
      ]
    },
    {
      "name": "Serverless Bundle Plugin Example",
      "description": "Serverless Framework example to deploy a lambda function using [Middy](https://middy.js.org/), the stylish Node.js middleware engine for AWS Lambda and [Serverless Bundle Plugin](https://www.serverless.com/plugins/serverless-bundle).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-node-typescript-bundle/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "Middy",
        "Serverless Bundle Plugin",
        "TypeScript"
      ]
    },
    {
      "name": "Serverless Middy",
      "description": "Serverless Framework example to deploy a lambda function using [Middy](https://middy.js.org/), the stylish Node.js middleware engine for AWS Lambda.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-node-typescript-middy/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "Middy"
      ]
    },
    {
      "name": "Serverless Middy with Custom Middleware",
      "description": "Serverless Framework example to deploy a lambda function using [Middy](https://middy.js.org/), the stylish Node.js middleware engine for AWS Lambda.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-node-typescript-middy-custom-middleware/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "Middy",
        "Custom Middleware"
      ]
    },
    {
      "name": "Serverless Nest Application with TypeScript",
      "description": "Serverless Framework example to deploy a NestJS application using TypeScript.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-node-typescript-nest/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "NestJS",
        "TypeScript"
      ]
    },
    {
      "name": "Terraform AWS Minecraft Server",
      "description": "Terraform example to deploy a Minecraft server in AWS EC2 instance using Docker.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/terraform-aws-minecraft-server/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Terraform",
        "AWS",
        "Minecraft",
        "Docker",
        "EC2"
      ]
    },
    {
      "name": "AWS Cognito Local Example",
      "description": "AWS Cognito local enviroment with Docker and Serverless offline",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-cognito-local/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "Serverless Offline",
        "AWS",
        "Cognito",
        "Docker"
      ]
    },
    {
      "name": "Serverless Twilio + Typescript Lambda example",
      "description": "Serverless Framework example to deploy a lambda function using Twilio and TypeScript.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-twilio-aws-lambdas-typescript/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "Serverless Offline",
        "AWS",
        "Twilio",
        "TypeScript"
      ]
    },
    {
      "name": "AWS Cognito local using Docker Compose",
      "description": "compose.yml to run Cognito locally.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-cognito/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "Cognito",
        "AWS"
      ]
    },
    {
      "name": "Serverless + FastAPI",
      "description": "Serverless Framework example to deploy a FastAPI application using Python. It also has local development environment using [Serverless Offline](https://www.serverless.com/plugins/serverless-offline).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-python-fastapi/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "Serverless Offline",
        "FastAPI",
        "Python"
      ]
    },
    {
      "name": "Terraform Starter Kit for AWS VPC, RDS instance, and Bastion Host",
      "description": "Terraform Starter kit for creating AWS infrastructure using Terraform that contains a VPC, RDS instance, and a bastion host.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/terraform-vpc-rds-instance-bastion-starter",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Terraform",
        "AWS",
        "VPC",
        "RDS",
        "Bastion"
      ]
    },
    {
      "name": "Terraform AWS VPC resources",
      "description": "Terraform module for creating AWS VPC resources.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/terraform-vpc-rds-instance-bastion-starter/modules/vpc",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Terraform",
        "AWS",
        "VPC"
      ]
    },
    {
      "name": "Terraform AWS RDS Postgres instance",
      "description": "Terraform module for creating AWS RDS Postgres instance.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/terraform-vpc-rds-instance-bastion-starter/modules/rds",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Terraform",
        "AWS",
        "RDS"
      ]
    },
    {
      "name": "Terraform Bastion Host",
      "description": "Terraform module which creates an EC2 instance acting as a bastion host",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/terraform-vpc-rds-instance-bastion-starter/modules/bastion",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Terraform",
        "AWS",
        "Bastion"
      ]
    },
    {
      "name": "Using Serverless Framework with Terraform",
      "description": "The definitive example of how to use Terraform and Serverless Framework together.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-terraform-example",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation",
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Serverless Framework",
        "Terraform",
        "AWS"
      ]
    },
    {
      "name": "Docker Compose NestJS Starter App",
      "description": "Docker Compose starter app for NestJS.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-nestjs",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "NestJS",
        "Node.js"
      ]
    },
    {
      "name": "Klotho",
      "description": "A complete analysis of the service and a Proof of Concept on how to integrate it with a GO application.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/klotho-analysis/",
      "tags": [
        "Examples > DevOps > Infrastructure from Code > Klotho and more!"
      ],
      "labels": [
        "AWS",
        "Pulumi",
        "Deployment",
        "Klotho"
      ]
    },
    {
      "name": "Automating Pull Request Review using DangerJS and GitHub Actions",
      "description": "Learn how to automate Pull Request (PR) reviews using DangerJS and GitHub Actions. Automating PR reviews helps enforce coding standards, catch potential issues, and improve code quality in your GitHub repository.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/github-actions-with-dangerjs",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "Tutorial",
        "GitHub Actions",
        "DangerJS",
        "Pull Request",
        "Automation"
      ]
    },
    {
      "name": "ShellCheck for Shell Scripting",
      "description": "Learn how to use ShellCheck to lint your shell scripts and catch potential issues before they become a problem.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/shellcheck-for-shell-scripting",
      "tags": [
        "Examples > DevOps > Shell Scripting and CLI Tools"
      ],
      "labels": [
        "Tutorial",
        "ShellCheck",
        "Shell Scripting",
        "Automation"
      ]
    },
    {
      "name": "Node Package Managers",
      "description": "Comparison of the most popular Node Package Managers: npm, yarn, pnpm.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/node-package-managers",
      "tags": [
        "Examples > DevOps > Dependency Management"
      ],
      "labels": [
        "Node",
        "npm",
        "yarn",
        "pnpm"
      ]
    },
    {
      "name": "WordPress Docker Compose Magic",
      "description": "Experience the magic of WordPress with this Docker Compose configuration. It seamlessly combines the power of Nginx, WordPress, and MySQL/MariaDB to create a delightful web environment. The lightweight Nginx handles incoming requests, custom configurations shape the entrance to the WordPress realm, and MariaDB ensures a robust database foundation. Explore the enchanting WordPress Wonderland locally or deploy it to the cloud effortlessly.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-wordpress-mysql",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker Compose",
        "Web Hosting",
        "Content Management",
        "PHP",
        "Nginx Configuration",
        "MariaDB Database",
        "MySQL Database"
      ]
    },
    {
      "name": "Serverless LocalStack with S3 and DynamoDB",
      "description": "Serverless Framework example to run lambda functions locally using [Serverless Offline](https://www.serverless.com/plugins/serverless-offline) with LocalStack. It provides a full local development environment using [Serverless LocalStack](https://www.serverless.com/plugins/serverless-localstack).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-localstack-with-s3-and-dynamodb/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation",
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Serverless Framework",
        "Serverless Offline",
        "Serverless LocalStack",
        "LocalStack",
        "S3",
        "DynamoDB"
      ]
    },
    {
      "name": "Tilt + Minikube Development Environment",
      "description": "Seamless, efficient, and developer-friendly Kubernetes development environment using Tilt and Minikube.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/kubernetes-tilt-dev/",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > Containers, Orchestration and Serverless > Kubernetes"
      ],
      "labels": [
        "Kubernetes",
        "Tilt",
        "Minikube",
        "Development Environment",
        "MicroServices"
      ]
    },
    {
      "name": "Terraform AWS Starter",
      "description": "Get started quickly with AWS infrastructure using a robust Terraform starter kit incorporating secure state management, VPC configuration, security groups, RDS provisioning, secrets management, SSM parameter store, and GitHub Actions integration!",
      "url": "https://github.com/nanlabs/terraform-aws-starter",
      "tags": [
        "Apps and Boilerplates",
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Terraform",
        "Terraform Modules",
        "Infrastructure as Code",
        "AWS",
        "VPC",
        "RDS",
        "RDS Aurora",
        "MongoDB",
        "GitHub Actions",
        "SSM Parameter Store",
        "Secrets Management",
        "Security Groups",
        "Super Linter"
      ]
    },
    {
      "name": "The Ultimate Guide to Code Review Tools",
      "description": "A guide where we present a curated selection of modern tools designed to revolutionize your code review process!",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/the-ultimate-guide-to-code-review-tools",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "Code Review",
        "Code Review Tools"
      ]
    },
    {
      "name": "Verdaccio with Docker Compose Example",
      "description": "Verdaccio is a lightweight private npm proxy registry. This example shows how to run Verdaccio locally using Docker Compose.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-verdaccio/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)",
        "Examples > DevOps > Dependency Management"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "Verdaccio",
        "Node Package Manager"
      ]
    },
    {
      "name": "Embracing the Power of LocalStack for AWS Emulation",
      "description": "A comprehensive guide highlighting the benefits of using LocalStack for AWS service emulation. The blog post covers various LocalStack examples for Docker and Serverless setups and explores its application in local development, CI, and more.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/embracing-the-power-of-localstack-for-aws-emulation",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)",
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "LocalStack",
        "AWS",
        "Docker",
        "Serverless",
        "DevOps",
        "CI",
        "Local Development"
      ]
    },
    {
      "name": "The Ultimate Guide to Secrets Management for Developers",
      "description": "Unlock the arcane art of secrets management with our comprehensive guide! Tailored for the average dev, this post is a treasure map leading to the best practices for storing and accessing sensitive data. Learn to navigate tools like AWS Parameter Store, `direnv`, `teller`, and more, with easy-to-follow examples that bring the theory to life. Perfect for those who've never realized the gravity of a leaked secret, this guide will be your enchanted scroll of wisdom.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/the-ultimate-guide-to-secrets-management-for-developers",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > Security and Compliance",
        "Examples > DevOps > Infrastructure as Code > Secrets Management"
      ],
      "labels": [
        "Secrets Management",
        "Cloud Secrets Management",
        "direnv",
        "teller",
        "Security",
        "DevOps",
        "Best Practices",
        "Environment Variables",
        "Encryption",
        "SOPS",
        "Secure Configuration"
      ]
    },
    {
      "name": "The Ultimate Guide to Security Assessment Tools",
      "description": "Comprehensive guides for integrating security tools at different stages of the development lifecycle, including IDE integrations, Git workflows, and CI/CD pipelines.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/the-ultimate-guide-to-security-assessment-tools",
      "tags": [
        "Examples > DevOps > Security and Compliance"
      ],
      "labels": [
        "Security",
        "DevOps",
        "Snyk",
        "Trivy",
        "Super Linter",
        "Mega Linter",
        "Shift Left"
      ]
    },
    {
      "name": "The Ultimate Guide to Pull Requests and Code Reviews",
      "description": "Comprehensive guide on creating effective pull requests and conducting thorough code reviews. This guide provides an overview of best practices, common pitfalls, and tools to automate and streamline the review process.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/the-ultimate-guide-to-pull-requests-and-code-reviews",
      "tags": [
        "Guides, Tutorials and Best Practices",
        "Examples > DevOps > Security and Compliance",
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": [
        "Pull Requests",
        "Code Reviews",
        "Best Practices",
        "Automation",
        "GitHub Actions",
        "DangerJS"
      ]
    },
    {
      "name": "nanlabs/terraform-modules",
      "description": "A comprehensive collection of reusable, production-ready Terraform modules and infrastructure examples for AWS and MongoDB Atlas, following best practices for security, scalability, and cost optimization.",
      "url": "https://github.com/nanlabs/terraform-modules",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Modules Library",
        "Examples",
        "Best Practices",
        "Production Ready"
      ]
    },
    {
      "name": "Terraform Modules by nanlabs",
      "description": "Battle-tested, security-first, and cost-optimized Terraform modules for AWS and MongoDB Atlas. Includes VPC, EKS, RDS, Aurora, MSK, Bastion, IAM, Amplify, and more.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "aws-vpc",
        "aws-eks",
        "aws-rds",
        "aws-rds-aurora",
        "aws-msk",
        "aws-bastion",
        "aws-docdb",
        "aws-iam-role",
        "aws-amplify-app",
        "mongodb-atlas-cluster"
      ]
    },
    {
      "name": "Terraform Examples by nanlabs",
      "description": "End-to-end infrastructure examples using the nanlabs Terraform modules, covering simple web apps, medium-complexity microservices, and full enterprise setups.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/examples",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "simple-web-app",
        "medium-complexity-infrastructure",
        "complete-enterprise-setup"
      ]
    },
    {
      "name": "aws-vpc (Terraform Module)",
      "description": "Complete wrapper around the official terraform-aws-modules/vpc/aws module with opinionated defaults, security best practices, and SSM Parameter Store integration.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules/aws-vpc",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Networking",
        "Parameter Store",
        "Security",
        "Best Practices"
      ]
    },
    {
      "name": "aws-eks (Terraform Module)",
      "description": "Opinionated wrapper for EKS clusters with VPC CNI optimization, node group management, OIDC integration, and production-ready defaults.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules/aws-eks",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform",
        "Examples > DevOps > Containers, Orchestration and Serverless > Kubernetes"
      ],
      "labels": [
        "Kubernetes",
        "OIDC",
        "Node Groups",
        "Monitoring"
      ]
    },
    {
      "name": "aws-rds (Terraform Module)",
      "description": "Complete wrapper for RDS with enhanced security, monitoring, SSM Parameter Store integration, and simplified configuration for PostgreSQL/MySQL.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules/aws-rds",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Database",
        "Parameter Store",
        "Security",
        "Monitoring"
      ]
    },
    {
      "name": "aws-rds-aurora (Terraform Module)",
      "description": "Fully customizable wrapper for Aurora clusters, supporting Serverless v2, SSM integration, and production-grade configuration.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules/aws-rds-aurora",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Database",
        "Aurora",
        "Serverless",
        "SSM"
      ]
    },
    {
      "name": "aws-msk (Terraform Module)",
      "description": "Opinionated wrapper for Amazon MSK (Kafka) with enhanced security, DNS integration, logging, and production defaults.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules/aws-msk",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Streaming",
        "Security",
        "DNS",
        "Logging"
      ]
    },
    {
      "name": "aws-bastion (Terraform Module)",
      "description": "Custom implementation for a secure, zero-trust bastion host using SSM, EC2 Instance Connect, VPC endpoints, and CloudWatch logging.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules/aws-bastion",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Security",
        "Zero Trust",
        "Session Manager",
        "CloudWatch"
      ]
    },
    {
      "name": "aws-docdb (Terraform Module)",
      "description": "Custom DocumentDB cluster module with integrated AWS Secrets Manager, SSM Parameter Store, and production-ready defaults.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules/aws-docdb",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Database",
        "Secrets Manager",
        "SSM",
        "Security"
      ]
    },
    {
      "name": "aws-iam-role (Terraform Module)",
      "description": "Flexible IAM role module supporting custom trust policies, inline/managed policies, and advanced security conditions.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules/aws-iam-role",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "IAM",
        "Security",
        "Policies",
        "RBAC"
      ]
    },
    {
      "name": "aws-amplify-app (Terraform Module)",
      "description": "Opinionated wrapper for AWS Amplify App with integrated GitHub PAT management, optimized for React/Node.js apps.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules/aws-amplify-app",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform",
        "Examples > DevOps > Low Code solutions > AWS Amplify"
      ],
      "labels": [
        "Frontend",
        "CI/CD",
        "GitHub Integration",
        "Parameter Store"
      ]
    },
    {
      "name": "mongodb-atlas-cluster (Terraform Module)",
      "description": "Custom MongoDB Atlas cluster module with project/team management, VPC peering, AWS integration, and secure connection details.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/modules/mongodb-atlas-cluster",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "Database",
        "Atlas",
        "VPC Peering",
        "Secrets Manager",
        "SSM"
      ]
    },
    {
      "name": "Simple Web App (Terraform Example)",
      "description": "Deploy a simple web application using AWS Amplify and a custom VPC. Demonstrates frontend hosting, GitHub integration, and secure infrastructure.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/examples/simple-web-app",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform",
        "Examples > DevOps > Low Code solutions > AWS Amplify"
      ],
      "labels": [
        "Frontend",
        "Amplify",
        "VPC",
        "Parameter Store"
      ]
    },
    {
      "name": "Medium Complexity Infrastructure (Terraform Example)",
      "description": "Medium-complexity setup with EKS, RDS, Bastion, and custom IAM. Shows microservices infrastructure with best practices.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/examples/medium-complexity-infrastructure",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform",
        "Examples > DevOps > Containers, Orchestration and Serverless > Kubernetes"
      ],
      "labels": [
        "Kubernetes",
        "Database",
        "Bastion",
        "IAM"
      ]
    },
    {
      "name": "Complete Enterprise Setup (Terraform Example)",
      "description": "Enterprise-grade infrastructure example with EKS, Aurora, MSK, DocumentDB, Bastion, IAM, monitoring, and security best practices.",
      "url": "https://github.com/nanlabs/terraform-modules/tree/main/examples/complete-enterprise-setup",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": [
        "EKS",
        "Aurora",
        "MSK",
        "DocumentDB",
        "Bastion",
        "IAM",
        "Monitoring"
      ]
    },
    {
      "name": "Golang REST API boilerplate",
      "description": "A comprehensive REST API boilerplate in Golang, featuring CRUD operations, structured logging, rate limiting, unit and integration tests, and API documentation with Swagger. Includes Docker Compose for MongoDB setup and tools like Gorilla Mux, Zap, and Mockery for streamlined development.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/golang-todo-rest-crud",
      "tags": [
        "Apps and Boilerplates"
      ],
      "labels": [
        "Golang",
        "REST API",
        "MongoDB",
        "Gorilla Mux",
        "Go Swagger",
        "Tollbooth",
        "Zap",
        "Viper",
        "Mockery",
        "Makefile",
        "Pre-commit",
        "Docker",
        "Docker Compose",
        "DockerTest",
        "Swagger",
        "Rate Limiting",
        "Logging",
        "Testing"
      ]
    },
    {
      "name": "Python CLI Basic Example",
      "description": "A minimal Python CLI example showcasing how to create commands without requiring the explicit use of the Python interpreter or script path.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/cli-base",
      "tags": [
        "Examples > Backend > CLI Tools"
      ],
      "labels": [
        "Python3",
        "CLI",
        "Command Line"
      ]
    },
    {
      "name": "Python CLI with Typer + Rich Example",
      "description": "A Python CLI tool built with Typer and Rich, demonstrating interaction with external APIs for currency exchange rates and styled console outputs.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/cli-typer-base",
      "tags": [
        "Examples > Backend > CLI Tools"
      ],
      "labels": [
        "Python3",
        "Typer",
        "Rich",
        "API Integration",
        "CLI"
      ]
    },
    {
      "name": "FastAPI Basic Example",
      "description": "A simple REST API built with FastAPI that retrieves mock data using the Faker library, showcasing basic API development.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-base",
      "tags": [
        "Examples > Backend > FastAPI"
      ],
      "labels": [
        "Python3",
        "FastAPI",
        "Faker",
        "Mock Data",
        "Pydantic"
      ]
    },
    {
      "name": "FastAPI Complete CRUD Example",
      "description": "A complete CRUD API built with FastAPI, featuring endpoints for managing employees and companies, along with database population using Faker.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-crud",
      "tags": [
        "Examples > Backend > FastAPI"
      ],
      "labels": [
        "Python3",
        "FastAPI",
        "CRUD",
        "SQLAlchemy",
        "Alembic",
        "Docker",
        "PostgreSQL"
      ]
    },
    {
      "name": "FastAPI GraphQL",
      "description": "A GraphQL API built with FastAPI and Strawberry, retrieving mock company data using the Faker library.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-gql",
      "tags": [
        "Examples > Backend > FastAPI"
      ],
      "labels": [
        "Python3",
        "FastAPI",
        "GraphQL",
        "Strawberry",
        "Faker"
      ]
    },
    {
      "name": "Stripe Integration with Node.js and TypeScript",
      "description": "A robust Stripe integration example using Node.js and TypeScript, enabling operations like customer creation, checkout sessions, and webhook handling.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/stripe-integration-node-typescript/",
      "tags": [
        "Examples > Backend > ThirdParty Integrations > Stripe"
      ],
      "labels": [
        "Node.js",
        "TypeScript",
        "Stripe",
        "Payments",
        "Webhooks",
        "API Integration"
      ]
    },
    {
      "name": "NestJS REST-based Microservices with NATS",
      "description": "A microservices architecture example using NestJS and NATS, demonstrating asynchronous messaging and request-reply patterns.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/nest-nats-microservices/",
      "tags": [
        "Examples > Backend > Microservices"
      ],
      "labels": [
        "Node.js",
        "NestJS",
        "Microservices",
        "NATS",
        "Messaging",
        "REST"
      ]
    },
    {
      "name": "FastAPI Example with PostgreSQL and Serverless Framework",
      "description": "A REST API built with FastAPI and PostgreSQL, deployed to AWS Lambda using the Serverless Framework. Includes database migrations with Alembic.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-postgres-with-serverless",
      "tags": [
        "Apps and Boilerplates",
        "Examples > Backend > FastAPI",
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Python3",
        "FastAPI",
        "PostgreSQL",
        "Serverless",
        "AWS Lambda",
        "Alembic"
      ]
    },
    {
      "name": "FastAPI with MongoDB and Docker Compose",
      "description": "A REST API built with FastAPI and MongoDB, containerized using Docker Compose for seamless development and deployment.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-mongo-with-docker-compose",
      "tags": [
        "Apps and Boilerplates",
        "Examples > Backend > FastAPI",
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Python3",
        "FastAPI",
        "MongoDB",
        "Docker",
        "Docker Compose"
      ]
    },
    {
      "name": "FastAPI Simple example with Docker Compose and PIP",
      "description": "A lightweight FastAPI example demonstrating containerization with Docker Compose and dependency management with PIP.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-simple-docker-pip",
      "tags": [
        "Apps and Boilerplates",
        "Examples > Backend > FastAPI",
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Python3",
        "FastAPI",
        "Docker",
        "PIP"
      ]
    },
    {
      "name": "SQLC with Go, PostgreSQL, Docker Compose",
      "description": "A REST API built with Go and SQLC, showcasing database operations with PostgreSQL and containerized development using Docker Compose.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/golang-api-with-postgres-and-sqlc",
      "tags": [
        "Apps and Boilerplates",
        "Examples > Backend > SQLC",
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Golang",
        "SQLC",
        "PostgreSQL",
        "Docker",
        "Docker Compose"
      ]
    },
    {
      "name": "LangGraph SLS FastAPI RAG",
      "description": "A Proof of Concept (POC) for a Retrieval Augmented Generation (RAG) system using LangGraph, deployed with the Serverless Framework on AWS Lambda. It integrates FastAPI for API development and DynamoDB for state management.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/langgraph-sls-fastapi-rag",
      "tags": [
        "Apps and Boilerplates",
        "Examples > Backend > FastAPI",
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Python3",
        "FastAPI",
        "LangGraph",
        "Serverless Framework",
        "AWS Lambda",
        "DynamoDB",
        "Docker",
        "RAG",
        "Retrieval Augmented Generation"
      ]
    },
    {
      "name": "Geospatial Python Urban Analysis with PostGIS",
      "description": "A comprehensive geospatial data analysis project for urban environments, featuring analysis of pedestrian zones, transportation networks, census data, and geographic boundaries. Built with PostgreSQL/PostGIS, Docker, and GeoPandas for efficient spatial queries, ETL pipelines, and geospatial machine learning models.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/geospatial-python-urban-analysis-with-postgis",
      "tags": [
        "Apps and Boilerplates",
        "Examples > Data Science and Machine Learning > Geospatial Analysis",
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Python3",
        "GeoPandas",
        "PostGIS",
        "PostgreSQL",
        "Docker",
        "Geospatial Analysis",
        "Urban Planning",
        "ETL",
        "Machine Learning",
        "Jupyter Notebooks",
        "Folium",
        "Matplotlib",
        "Scikit-learn",
        "Rasterio",
        "GIS"
      ]
    }
  ]
}
